import com.sun.source.tree.CompilationUnitTree;
import com.sun.source.util.JavacTask;
import com.sun.tools.javac.api.JavacTool;

import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

public class ASTExample {
    public static void main(String[] args) throws IOException {
        String sourceCode = "public class HelloWorld {\n" +
                "    public static void main(String[] args) {\n" +
                "        System.out.println(\"Hello, world!\");\n" +
                "    }\n" +
                "}";
        
        JavaCompiler compiler = JavacTool.create();
        JavaFileObject sourceFile = new SourceFileObject("HelloWorld.java", sourceCode);
        JavacTask task = (JavacTask) compiler.getTask(null, null, null, null, null, 
                                                        Iterable.of(sourceFile));
        CompilationUnitTree ast = task.parse().iterator().next();
        
        // Print the AST for debugging
        System.out.println(ast);
    }
    
    private static class SourceFileObject implements JavaFileObject {
        private final String name;
        private final String source;
        
        public SourceFileObject(String name, String source) {
            this.name = name;
            this.source = source;
        }

        @Override
        public Kind getKind() {
            return Kind.SOURCE;
        }

        @Override
        public boolean isNameCompatible(String simpleName, Kind kind) {
            return true;
        }

        @Override
        public NestingKind getNestingKind() {
            return null;
        }

        @Override
        public Modifier getAccessLevel() {
            return null;
        }

        @Override
        public URI toUri() {
            return null;
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public InputStream openInputStream() throws IOException {
            return new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8));
        }

        @Override
        public OutputStream openOutputStream() throws IOException {
            return null;
        }

        @Override
        public Reader openReader(boolean ignoreEncodingErrors) throws IOException {
            return new InputStreamReader(openInputStream());
        }

        @Override
        public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
            return source;
        }

        @Override
        public Writer openWriter() throws IOException {
            return null;
        }

        @Override
        public long getLastModified() {
            return 0;
        }

        @Override
        public boolean delete() {
            return false;
        }
    }
}

